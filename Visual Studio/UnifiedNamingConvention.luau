-- Cache

--- Removes object from the Instance cache.
-- @param object The object to invalidate
function cache.invalidate(object: Instance): ()

    --- Checks whether object is in the Instance cache.
    -- @param object The object to check
    -- @return boolean indicating if object is cached
    function cache.iscached(object: Instance): boolean
    
    --- Replaces the old with new in the Instance cache.
    -- @param old The object to replace
    -- @param new The new object to replace old with
    function cache.replace(old: Instance, new: Instance): ()
    
    -- Closures
    
    --- Checks whether the current function was called by SirHurt.
    -- @return boolean indicating if the function was called by SirHurt
    function checkcaller(): boolean
    
    --- Returns a new closure which behaves identically to cl.
    -- @param cl The closure to clone
    -- @return A new closure identical to cl
    function clonefunction<T>(cl: T): T
    
    --- Returns the script which invoked the current function.
    -- @return The script that called the current function
    function getcallingscript(): BaseScript
    
    --- Routes the calls from cl to hook. Returns a clone of the original function.
    -- @param cl The function to hook
    -- @param hook The function to redirect calls to
    -- @return A cloned function
    function hookfunction<T>(cl: T, hook: function): T
    
    --- Checks whether cl has been hooked with hookfunction.
    -- @param cl The function to check
    -- @return boolean indicating if the function has been hooked
    function isfunctionhooked(cl: (...any) -> any): boolean
    
    --- Removes all hooks applied to the target function, restoring it to its original state.
    -- @param cl The function to restore
    function restorefunction(cl: (...any) -> any): ()
    
    --- Checks whether cl is a C function.
    -- @param cl The function to check
    -- @return boolean indicating if cl is a C function
    function iscclosure(cl: (...any) -> any): boolean
    
    --- Checks whether cl is a Luau function.
    -- @param cl The function to check
    -- @return boolean indicating if cl is a Luau function
    function islclosure(cl: (...any) -> any): boolean
    
    --- Checks whether cl originates from a script ran with SirHurt.
    -- @param cl The function to check
    -- @return boolean indicating if cl originates from SirHurt
    function isexecutorclosure(cl: (...any) -> any): boolean
    
    -- Crypt
    
    --- Encodes a string into Base64.
    -- @param data The data to encode
    -- @return The Base64 encoded string
    function crypt.base64encode(data: string): string
    
    --- Decodes a Base64 encoded string.
    -- @param encoded The data to decode
    -- @return The decoded string
    function crypt.base64decode(encoded: string): string
    
    --- Encrypts an unencoded string using AES encryption, returns the base64 encoded and encrypted string alongside the IV.
    -- @param data The unencoded content
    -- @param key A base64 128-bit key
    -- @param iv Optional base64 AES IV
    -- @param mode The AES cipher mode
    -- @return The encrypted data and IV
    function crypt.encrypt(data: string, key: string, iv: string?, mode: string?): (string, string)
    
    --- Decrypts a base64 encoded and encrypted string.
    -- @param data The base64 encoded and encrypted content
    -- @param key A base64 128-bit key
    -- @param iv The base64 AES IV
    -- @param mode The AES cipher mode
    -- @return The decrypted string
    function crypt.decrypt(data: string, key: string, iv: string, mode: string): string
    
    --- Generates a random sequence of bytes with the given size.
    -- @param size The number of bytes to generate
    -- @return The generated bytes as a base64 encoded string
    function crypt.generatebytes(size: number): string
    
    --- Generates a base64 encoded 256-bit key.
    -- @return The generated base64 encoded 256-bit key
    function crypt.generatekey(): string
    
    --- Hashes the data based on the provided algorithm.
    -- @param data The unencoded content
    -- @param algorithm The hash algorithm
    -- @return The hashed data
    function crypt.hash(data: string, algorithm: string): string
    
    -- Debug
    
    --- Returns the constant at index in the constant table of the function or level cl.
    -- @param cl A function or stack level
    -- @param index The index of the constant to retrieve
    -- @return The constant at the given index
    function debug.getconstant(cl: ((...any) -> any) | number, index: number): any
    
    --- Returns the constant table of the function or level cl.
    -- @param cl A function or stack level
    -- @return The constant table of the function or level
    function debug.getconstants(cl: ((...any) -> any) | number): any
    
    --- Returns debug information about a function or stack level.
    -- @param cl A function or stack level
    -- @return Debug information
    function debug.getinfo(cl: ((...any) -> any) | number): DebugInfo
    
    --- Returns the proto at index in the function or level cl.
    -- @param cl A function or stack level
    -- @param index The index of the proto to return
    -- @param active Whether to return active closures
    -- @return The proto at the given index
    function debug.getproto(cl: ((...any) -> any) | number, index: number, active: boolean?): ((...any) -> any) | { (...any) -> any }
    
    --- Returns a list of protos of the function or level cl.
    -- @param cl A function or stack level
    -- @return A list of protos
    function debug.getprotos(cl: ((...any) -> any) | number): { (...any) -> any }
    
    --- Returns the value at index in the stack frame level.
    -- @param level The stack frame to look up
    -- @param index The index of the value to retrieve
    -- @return The value at the given index
    function debug.getstack(level: number, index: number?): any | { any }
    
    -- Drawing
    
    --- Creates a new drawing of the specified type.
    -- @param type The type of drawing object (Line, Text, Circle, etc.)
    -- @return The created drawing object
    function Drawing.new(type: string): DrawingObject
    
    --- A table containing the available fonts.
    Drawing.Fonts = {
        UI = 0,
        System = 1,
        Plex = 2,
        Monospace = 3
    }
    
    --- Destroys every drawing object in the cache, invalidates any references.
    function cleardrawcache(): ()
    
    --- Gets the value of a property of a drawing.
    -- @param drawing The drawing to get the property of
    -- @param property The property to get
    -- @return The value of the property
    function getrenderproperty(drawing: DrawingObject, property: string): any
    
    --- Checks whether the passed object is a drawing.
    -- @param object The object to check
    -- @return boolean indicating if the object is a drawing
    function isrenderobj(object: any): boolean
    
    --- Sets the value of a property of a drawing.
    -- @param drawing The drawing to set the property of
    -- @param property The property to set
    -- @param value The value to set the property to
    function setrenderproperty(drawing: DrawingObject, property: string, value: any): ()
    
    -- Filesystem
    
    --- Returns the contents of the file located at path.
    -- @param path The path of the file
    -- @return The file contents
    function readfile(path: string): string
    
    --- Returns a list of all files in folder path.
    -- @param path The path of the folder
    -- @return A list of files
    function listfiles(path: string): { string }
    
    --- Writes data to file at path.
    -- @param path The path of the file
    -- @param data Data to write
    function writefile(path: string, data: string): ()
    
    --- Creates a folder at path if there doesn't exist one already.
    -- @param path The path to the folder
    function makefolder(path: string): ()
    
    --- Appends data to file at path.
    -- @param path The path of the file
    -- @param data Data to append
    function appendfile(path: string, data: string): ()
    
    --- Checks whether path points to a valid file.
    -- @param path The path to check
    -- @return boolean indicating if the path points to a file
    function isfile(path: string): boolean
    
    --- Checks whether path points to a valid folder.
    -- @param path The path to check
    -- @return boolean indicating if the path points to a folder
    function isfolder(path: string): boolean
    
    --- Deletes the file at path.
    -- @param path The path to delete
    function delfile(path: string): ()
    
    --- Deletes the folder at path.
    -- @param path The path to delete
    function delfolder(path: string): ()
    
    --- Loads the contents of a file at path as a chunk of Lua code.
    -- @param path The path to the file
    -- @param chunkname Optional chunkname
    -- @return A function and an optional error message
    function loadfile(path: string, chunkname: string?): (((...any) -> any)?, string?)
    
    --- Executes the contents of file at path.
    -- @param path The path to the file
    function dofile(path: string): ()
    
    -- Input
    
    --- Returns whether the game's window is in focus.
    -- @return boolean indicating whether the window is active
    function isrbxactive(): boolean
    
    --- Clicks the left mouse button.
    function mouse1click(): ()
    
    --- Presses the left mouse button.
    function mouse1press(): ()
    
    --- Releases the left mouse button.
    function mouse1release(): ()
    
    --- Clicks the right mouse button.
    function mouse2click(): ()
    
    --- Presses the right mouse button.
    function mouse2press(): ()
    
    --- Releases the right mouse button.
    function mouse2release(): ()
    
    --- Moves the cursor to the specified coordinates.
    -- @param x New mouse x position
    -- @param y New mouse y position
    function mousemoveabs(x: number, y: number): ()
    
    --- Adjusts the cursor by the specified coordinates.
    -- @param x Amount to offset the cursor horizontally
    -- @param y Amount to offset the cursor vertically
    function mousemoverel(x: number, y: number): ()
    
    --- Scrolls the mouse by the specified number of pixels.
    -- @param pixels Amount to scroll
    function mousescroll(pixels: number): ()
    

    -- Instances
--- **fireclickdetector**
-- Dispatches a click to the passed ClickDetector.
-- @param object The ClickDetector to dispatch to.
function fireclickdetector(object: ClickDetector): ()

    --- **fireproximityprompt**
    -- Dispatches an interaction to the passed ProximityPrompt.
    -- @param object The ProximityPrompt to dispatch to.
    function fireproximityprompt(object: ProximityPrompt): ()
    
    --- **firetouchinterest**
    -- Dispatches a touch event to the passed "from" instance as the toucher.
    -- @param from The toucher instance.
    -- @param to The touchee instance.
    -- @param type The type of touch.
    function firetouchinterest(from: Instance, to: Instance, type: number): ()
    
    --- **getcallbackvalue**
    -- Returns the function assigned to a callback property of an object.
    -- @param object The object to get the callback property from.
    -- @param property The name of the callback property.
    -- @return The callback function, or nil if no callback is assigned.
    function getcallbackvalue(object: Instance, property: string): ((...any) -> any)?
    
    --- **getconnections**
    -- Creates a list of connection proxies for the given signal.
    -- @param signal The signal to retrieve connection proxies for.
    -- @return A list of ConnectionProxy objects.
    function getconnections(signal: RBXScriptSignal): { ConnectionProxy }
    
    --- **getcustomasset**
    -- Returns a content ID for the asset located at the specified path.
    -- @param path The path to the asset.
    -- @param noCache Whether or not to cache the asset.
    -- @return The content ID of the asset.
    function getcustomasset(path: string, noCache: boolean): string
    
    --- **gethiddenproperty**
    -- Returns the value of a property of an object, and whether the property is scriptable.
    -- @param object The object to index.
    -- @param property The name of the property.
    -- @return The property value and a boolean indicating whether the property is scriptable.
    function gethiddenproperty(object: Instance, property: string): (any, boolean)
    
    -- Metatable
    --- **getrawmetatable**
    -- Returns the metatable of the given object.
    -- @param object An object with a metatable.
    -- @return The metatable of the object.
    function getrawmetatable(object: any): { any: any }
    
    --- **hookmetamethod**
    -- Swaps the metamethod of an object with a hook, returning the original metamethod.
    -- @param object The object with a metatable.
    -- @param method The name of the method to hook.
    -- @param hook The function to replace the method with.
    -- @return The original metamethod.
    function hookmetamethod(object: any, method: string, hook: (...any) -> any): (...any) -> any
    
    --- **getnamecallmethod**
    -- Returns the name of the method that invoked the `__namecall` metamethod.
    -- @return The name of the invoked method.
    function getnamecallmethod(): string
    
    --- **isreadonly**
    -- Returns whether the object is frozen or readonly.
    -- @param object A table or userdata.
    -- @return True if the object is readonly, false otherwise.
    function isreadonly(object: any): boolean
    
    --- **setrawmetatable**
    -- Sets the metatable of an object to the specified metatable.
    -- @param object A table or userdata.
    -- @param metatable The new metatable to set.
    function setrawmetatable(object: any, metatable: { [any]: any }): ()
    
    --- **setreadonly**
    -- Sets whether an object is frozen or readonly.
    -- @param object A table or userdata.
    -- @param readonly Whether or not the object should be frozen.
    function setreadonly(object: any, readonly: boolean): ()
    
    -- Misc
    --- **identifyexecutor**
    -- Returns "SirHurt" alongside the current version.
    -- @return "SirHurt" and the current version.
    function identifyexecutor(): (string, string)
    
    --- **lz4compress**
    -- Compresses data using LZ4 compression.
    -- @param data The uncompressed data.
    -- @return The compressed data.
    function lz4compress(data: string): string
    
    --- **lz4decompress**
    -- Decompresses data using LZ4 compression.
    -- @param data The compressed data.
    -- @param size The size of the decompressed data.
    -- @return The decompressed data.
    function lz4decompress(data: string, size: number): string
    
    --- **messagebox**
    -- Creates a Windows message box.
    -- @param text The message to display.
    -- @param caption The title of the message box.
    -- @param flags The flags to customize the message box.
    -- @return The result of the message box interaction.
    function messagebox(text: string, caption: string, flags: number): number
    
    --- **queue_on_teleport**
    -- Queues the specified script to be executed after the player teleports to a different place.
    -- @param code The script to execute.
    function queue_on_teleport(code: string): ()
    
    --- **request**
    -- Sends an HTTP request using the specified options. Yields until the request completes.
    -- @param options The options to use for the request.
    -- @return The HTTP response.
    function request(options: HttpRequest): HttpResponse
    
    --- **setclipboard**
    -- Copies text to the clipboard.
    -- @param text The text to copy.
    function setclipboard(text: string): ()
    
    --- **setfpscap**
    -- Sets the FPS cap to the specified value.
    -- @param fps The new FPS cap.
    function setfpscap(fps: number): ()
    
    --- **gethwid**
    -- Gets the user's HWID.
    -- @return The user's HWID.
    -- 🛑 DO NOT USE THIS FOR AUTHENTICATION, IT IS NOT A SECURE FUNCTION.
    function gethwid(): string
    
    --- **getscripts**
    -- Returns a list of all scripts.
    -- @return A list of all ModuleScript and LocalScript objects.
    function getscripts(): { ModuleScript | LocalScript }
    
    --- **getthreadidentity**
    -- Returns the identity of the current thread.
    -- @return The identity of the current thread.
    function getthreadidentity(): number
    
    --- **setthreadidentity**
    -- Sets the identity of the current thread.
    -- @param identity The new identity.
    function setthreadidentity(identity: number): ()
    
    -- Actor
    --- **run_on_actor**
    -- Runs code on the passed actor's state.
    -- @param actor The actor to execute code on.
    -- @param code The code to execute.
    function run_on_actor(actor: Actor, code: string): ()
    
    --- **getactors**
    -- Returns a list of all actors in the game.
    -- @return A list of all Actor objects.
    function getactors(): { Actor }
    
    --- **getdeletedactors**
    -- Returns a list of all actors parented to nil (experimental).
    -- @return A list of all deleted Actor objects.
    function getdeletedactors(): { Actor }
        
